#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SYMBOLS 100
#define MAX_RULES 100

typedef struct {
    char lhs;
    char rhs[MAX_SYMBOLS];
} Rule;

typedef struct {
    Rule rules[MAX_RULES];
    int num_rules;
} Grammar;

void read_grammar(Grammar* grammar) {
    printf("Enter the number of rules: ");
    scanf("%d", &grammar->num_rules);
    printf("Enter the rules in the format A -> B1B2...Bn:\n");
    for (int i = 0; i < grammar->num_rules; i++) {
        scanf(" %c -> %s", &grammar->rules[i].lhs, grammar->rules[i].rhs);
    }
}

void print_grammar(Grammar grammar) {
    printf("Grammar:\n");
    for (int i = 0; i < grammar.num_rules; i++) {
        printf("%c -> %s\n", grammar.rules[i].lhs, grammar.rules[i].rhs);
    }
}

int is_non_terminal(char symbol) {
    return symbol >= 'A' && symbol <= 'Z';
}

void compute_first(Grammar grammar, char* variable, char* first) {
    first[0] = '\0';
    if (!is_non_terminal(variable[0])) {
        strncat(first, variable, 1);
        return;
    }
    for (int i = 0; i < grammar.num_rules; i++) {
        if (grammar.rules[i].lhs == variable[0]) {
            char* rhs = grammar.rules[i].rhs;
            if (rhs[0] == 'e') {
                strncpy(first, "e", 1);
            }
            else {
                char sub_first[MAX_SYMBOLS];
                compute_first(grammar, rhs, sub_first);
                for (int j = 0; j < strlen(sub_first); j++) {
                    if (sub_first[j] != 'e' && strchr(first, sub_first[j]) == NULL) {
                        strncat(first, &sub_first[j], 1);
                    }
                }
            }
        }
    }
}

void compute_follow(Grammar grammar, char variable, char* follow) {
    char sub_follow[MAX_SYMBOLS];
    follow[0] = '\0';
    if (!is_non_terminal(variable)) {
        return;
    }
    if (variable == grammar.rules[0].lhs) {
        strncat(follow, "$", 2);
    }
    for (int i = 0; i < grammar.num_rules; i++) {
        char* rhs = grammar.rules[i].rhs;
        for (int j = 0; j < strlen(rhs); j++) {
            if (rhs[j] == variable) {
                if (j == strlen(rhs)-1) {
                    compute_follow(grammar, grammar.rules[i].lhs, sub_follow);
                    for (int k = 0; k < strlen(sub_follow); k++) {
                        if (strchr(follow, sub_follow[k]) == NULL) {
                            strncat(follow, &sub_follow[k], 1);
                        }
                    }
                }
                else {
                    if (!is_non_terminal(rhs[j+1])) {
                        strncat(follow, &rhs[j+1], 1);
                    }
                    else {
                        char sub_first[MAX_SYMBOLS];
                        compute_first(grammar, &rhs[j+1], sub_first);
                        for (int k = 0; k < strlen(sub_first); k++) {
                            if (sub_first[k] != 'e' && strchr(follow, sub_first[k]) == NULL) {
                                strncat(follow, &sub_first[k], 1);
                            }
                        }
                        if (strchr(sub_first, 'e') != NULL) {
                            compute_follow(grammar, variable, sub_follow);
                            for (int k = 0; k < strlen(sub_follow); k++) {
                                if (strchr(follow, sub_follow[k]) == NULL) {
                                    strncat(follow, &sub_follow[k], 1);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

int main() {
    Grammar grammar;
    read_grammar(&grammar);
    print_grammar(grammar);

    char variable;
    printf("Enter a variable to compute first/follow for: ");
    scanf(" %c", &variable);

    int choice;
    printf("Enter 1 to compute FIRST or 2 to compute FOLLOW: ");
    scanf("%d", &choice);
char result[MAX_SYMBOLS];
    if (choice == 1) {
        compute_first(grammar, &variable, result);
        printf("First(%c) = {%s}\n", variable, result);
    }
    else if (choice == 2) {
        compute_follow(grammar, variable, result);
        printf("Follow(%c) = {%s}\n", variable, result);
    }
    else {
        printf("Invalid choice\n");
    }

    return 0;
}
