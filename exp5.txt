#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_RULES 10

// Grammar rule structure
typedef struct {
    char nonTerminal;
    char production[50];
} Rule;

// Function to match a specific terminal symbol
bool match(char symbol, char* input, int* pos) {
    if (input[*pos] == symbol) {
        (*pos)++;
        return true;
    }
    return false;
}

// Recursive descent parsing function
bool parseInput(char* input, int* pos, Rule* grammar, int numRules, char nonTerminal) {
    for (int i = 0; i < numRules; i++) {
        if (grammar[i].nonTerminal == nonTerminal) {
            int oldPos = *pos;
            bool valid = true;
            for (int j = 0; grammar[i].production[j] != '\0'; j++) {
                char symbol = grammar[i].production[j];
                if (symbol >= 'A' && symbol <= 'Z') {
                    if (!parseInput(input, pos, grammar, numRules, symbol)) {
                        valid = false;
                        break;
                    }
                } else {
                    if (!match(symbol, input, pos)) {
                        valid = false;
                        break;
                    }
                }
            }
            if (valid) {
                return true;
            }
            *pos = oldPos;
        }
    }
    return false;
}

int main() {
    char input[100];
    Rule grammar[MAX_RULES];
    int numRules;

    printf("Enter the input string: ");
    scanf("%s", input);

    printf("Enter the number of grammar rules: ");
    scanf("%d", &numRules);

    printf("Enter the grammar rules in the format 'NonTerminal -> Production':\n");
    for (int i = 0; i < numRules; i++) {
        scanf(" %c -> %[^\n]", &grammar[i].nonTerminal, grammar[i].production);
    }

    int pos = 0;
    char startSymbol = grammar[0].nonTerminal;

    if (parseInput(input, &pos, grammar, numRules, startSymbol) && input[pos] == '\0') {
        printf("Input can be parsed.\n");
    } else {
        printf("Input cannot be parsed.\n");
    }

    return 0;
}
